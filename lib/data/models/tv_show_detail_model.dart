import 'package:tedflix_app/domain/entities/tv_show_detail_entity.dart';
import 'package:tedflix_app/domain/entities/season_entity.dart';
import 'package:tedflix_app/domain/entities/episode_entity.dart';

class TVShowDetailModel extends TVShowDetailEntity {
  const TVShowDetailModel({
    required int id,
    required String name,
    required String overview,
    required String firstAirDate,
    required double voteAverage,
    required int voteCount,
    required String backdropPath,
    required String posterPath,
    required List<String> createdBy,
    required List<int> episodeRunTime,
    required List<String> genres,
    required String homepage,
    required bool inProduction,
    required List<String> languages,
    required String lastAirDate,
    required String lastEpisodeToAir,
    required String nextEpisodeToAir,
    required List<String> networks,
    required int numberOfEpisodes,
    required int numberOfSeasons,
    required List<String> originCountry,
    required String originalLanguage,
    required String originalName,
    required double popularity,
    required List<String> productionCompanies,
    required List<String> productionCountries,
    required List<SeasonEntity> seasons,
    required String status,
    required String type,
  }) : super(
          id: id,
          name: name,
          overview: overview,
          firstAirDate: firstAirDate,
          voteAverage: voteAverage,
          voteCount: voteCount,
          backdropPath: backdropPath,
          posterPath: posterPath,
          createdBy: createdBy,
          episodeRunTime: episodeRunTime,
          genres: genres,
          homepage: homepage,
          inProduction: inProduction,
          languages: languages,
          lastAirDate: lastAirDate,
          lastEpisodeToAir: lastEpisodeToAir,
          nextEpisodeToAir: nextEpisodeToAir,
          networks: networks,
          numberOfEpisodes: numberOfEpisodes,
          numberOfSeasons: numberOfSeasons,
          originCountry: originCountry,
          originalLanguage: originalLanguage,
          originalName: originalName,
          popularity: popularity,
          productionCompanies: productionCompanies,
          productionCountries: productionCountries,
          seasons: seasons,
          status: status,
          type: type,
        );

  factory TVShowDetailModel.fromJson(Map<String, dynamic> json) {
    return TVShowDetailModel(
      id: json['id'] as int? ?? 0,
      name: json['name'] as String? ?? '',
      overview: json['overview'] as String? ?? '',
      firstAirDate: json['first_air_date'] as String? ?? '',
      voteAverage: (json['vote_average'] as num?)?.toDouble() ?? 0.0,
      voteCount: json['vote_count'] as int? ?? 0,
      backdropPath: json['backdrop_path'] as String? ?? '',
      posterPath: json['poster_path'] as String? ?? '',
      createdBy: List<String>.from(json['created_by']?.map((x) => x['name']) ?? []),
      episodeRunTime: List<int>.from(json['episode_run_time'] ?? []),
      genres: List<String>.from(json['genres']?.map((x) => x['name']) ?? []),
      homepage: json['homepage'] as String? ?? '',
      inProduction: json['in_production'] as bool? ?? false,
      languages: List<String>.from(json['languages'] ?? []),
      lastAirDate: json['last_air_date'] as String? ?? '',
      lastEpisodeToAir: json['last_episode_to_air']?['name'] as String? ?? '',
      nextEpisodeToAir: json['next_episode_to_air']?['name'] as String? ?? '',
      networks: List<String>.from(json['networks']?.map((x) => x['name']) ?? []),
      numberOfEpisodes: json['number_of_episodes'] as int? ?? 0,
      numberOfSeasons: json['number_of_seasons'] as int? ?? 0,
      originCountry: List<String>.from(json['origin_country'] ?? []),
      originalLanguage: json['original_language'] as String? ?? '',
      originalName: json['original_name'] as String? ?? '',
      popularity: (json['popularity'] as num?)?.toDouble() ?? 0.0,
      productionCompanies: List<String>.from(json['production_companies']?.map((x) => x['name']) ?? []),
      productionCountries: List<String>.from(json['production_countries']?.map((x) => x['name']) ?? []),
      seasons: (json['seasons'] as List<dynamic>?)?.map(
            (x) => SeasonEntity(
              id: x['id'] as int? ?? 0,
              name: x['name'] as String? ?? '',
              overview: x['overview'] as String? ?? '',
              airDate: x['air_date'] as String? ?? '',
              episodeCount: x['episode_count'] as int? ?? 0,
              posterPath: x['poster_path'] as String? ?? '',
              seasonNumber: x['season_number'] as int? ?? 0,
              episodes: [],
            ),
          ).toList() ?? [],
      status: json['status'] as String? ?? '',
      type: json['type'] as String? ?? '',
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'name': name,
      'overview': overview,
      'first_air_date': firstAirDate,
      'vote_average': voteAverage,
      'vote_count': voteCount,
      'backdrop_path': backdropPath,
      'poster_path': posterPath,
      'created_by': createdBy,
      'episode_run_time': episodeRunTime,
      'genres': genres,
      'homepage': homepage,
      'in_production': inProduction,
      'languages': languages,
      'last_air_date': lastAirDate,
      'last_episode_to_air': lastEpisodeToAir,
      'next_episode_to_air': nextEpisodeToAir,
      'networks': networks,
      'number_of_episodes': numberOfEpisodes,
      'number_of_seasons': numberOfSeasons,
      'origin_country': originCountry,
      'original_language': originalLanguage,
      'original_name': originalName,
      'popularity': popularity,
      'production_companies': productionCompanies,
      'production_countries': productionCountries,
      'seasons': seasons,
      'status': status,
      'type': type,
    };
  }
}
 